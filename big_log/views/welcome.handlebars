<div class="content">
    <h1 class="content__heading">
        {{ title }}
    </h1>

    <div class="content__paragraph">
        Ah, yes, my blog. I've been procrastinating the techie's write of passage for some time now. I've made these stupid-simple template websites for some time now, so it's little surprise the novelty
        of developing and deploying these toy projects has faded. Of course, it shouldn't be a matter of procrastination. At the end of the day, my frontend pipeline is often simple and easy: cook up some
        HTML, add some CSS, and serve!
    </div>
    <div class="content__paragraph">
        ...
    </div>
    <div class="content__paragraph">
        But wouldn't it be great if users could log in and comment on my entries? "Alright," I think, "I'll just authenticate through Google's OAuth2!" And then everything is better. "That little spice
        of authentication is just what my blog needed!"
    </div>
    <div class="content__paragraph">
        ...
    </div>
    <div class="content__paragraph">
        Alas, I grow tired of copy-pasting this header markup across pages. "Wouldn't it be great if I could template it?" I think. So, I hook up HandlebarsJS as a view engine and, miraculously, all is
        right in the world once again. My work is complete. I am done. Surely... Right?
    </div>
    <div class="content__paragraph">
        "DRATS!" I scream as I pull up the website on my iPhone 5s, "The header! It's... unusable!" I hook up some Javascript to allow a button to toggle the header menu on smaller screens.
        I refactor all of my CSS to use 'em' instead of 'px'. I refactor all of that to work with SASS, and then with SCSS. I decide to set up Babble. Then Gulp. Then Webpack.
    </div>
    <div class="content__paragraph">
        I move everything to CoffeeScript. Upon discovering CoffeeScript is deprecated, I refactor everything to Typescript. I move from MVC to React, and then to Angular, and then to Vue, and then
        back to React. I decide Javascript is old news and move everything to Blazor with a .Net backend. I turn every single domain endpoint into its own microservice. All servers are talking
        to each other via SignalR Hub. All data is cached and eventually consistent.
    </div>
    <div class="content__paragraph">
        I am no longer my own, I am the property of the code gods.
    </div>
    <div class="content__paragraph">
        I try to snap out of it. I stumble into the bathroom and splash my face with cold water. I look up to the mirror, but I do not see a person. I only see a meaningless stream of information
        waiting to be processed. Everything is code. There is no love, no joy, no beauty, no people. Only Javascript best practices.
    </div>
    <div class="content__paragraph">
        Anyways, I've decided to keep it pretty simple this time.
    </div>
</div>